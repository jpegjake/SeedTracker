AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Seed Tracker App

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 10
    MemorySize: 128
    Tracing: Active
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'" 


Resources:

  # Lambda authorizer
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./auth/
      Handler: auth.handler
      Policies:
        - AWSLambdaBasicExecutionRole

  # API Gateway definition with authorizer and stage
  FirebaseApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: FirebaseApi
      StageName: Prod 
      Auth:
        DefaultAuthorizer: Firebase
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          Firebase:
            FunctionArn: !GetAtt AuthFunction.Arn
            Identity:
              Header: Authorization
        
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./users/
      Handler: users.handler
      Events:
        # A specific event for the OPTIONS method is not needed for simple CORS configs,
        # but including it can help with debugging and ensures the authorizer is not
        # applied to preflight requests. The RestApi 'Cors' property already handles
        # the OPTIONS preflight, so we just need to ensure the methods are configured.
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId: !Ref FirebaseApi
            Auth:
              Authorizer: Firebase
        CreateUser:
          Type: Api
          Properties:
            Path: /user
            Method: post
            RestApiId: !Ref FirebaseApi
            Auth:
              Authorizer: Firebase
        DeleteUser:
          Type: Api
          Properties:
            Path: /user
            Method: delete
            RestApiId: !Ref FirebaseApi
            Auth:
              Authorizer: Firebase

  SeedsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./seeds/
      Handler: seeds.handler
      Events:
        GetAllSeeds:
          Type: Api
          Properties:
            Path: /seeds/all
            Method: get
            RestApiId: !Ref FirebaseApi
            Auth:
              Authorizer: Firebase
        GetUserSeeds:
          Type: Api
          Properties:
            Path: /seeds
            Method: get
            RestApiId: !Ref FirebaseApi
            Auth:
              Authorizer: Firebase
        CreateSeed:
          Type: Api
          Properties:
            Path: /seed
            Method: post
            RestApiId: !Ref FirebaseApi
            Auth:
              Authorizer: Firebase
        UpdateSeed:
          Type: Api
          Properties:
            Path: /seed
            Method: put
            RestApiId: !Ref FirebaseApi
            Auth:
              Authorizer: Firebase
        DeleteSeed:
          Type: Api
          Properties:
            Path: /seed
            Method: delete
            RestApiId: !Ref FirebaseApi
            Auth:
              Authorizer: Firebase

  PlantTypesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./planttypes/
      Handler: planttypes.handler
      Events:
        GetPlantTypes:
          Type: Api
          Properties:
            Path: /planttypes/{type}
            Method: get
            RestApiId: !Ref FirebaseApi
            Auth:
              Authorizer: Firebase
        GetUniquePlantTypes:
          Type: Api
          Properties:
            Path: /planttypes
            Method: get
            RestApiId: !Ref FirebaseApi
            Auth:
              Authorizer: Firebase